-keep enum j$.time.DayOfWeek {
}
-keep class j$.time.Duration {
  public int compareTo(j$.time.Duration);
  public int getNano();
  public long getSeconds();
  public boolean isNegative();
  public boolean isZero();
  public static j$.time.Duration ofMillis(long);
  public static j$.time.Duration ofMinutes(long);
  public static j$.time.Duration ofSeconds(long,long);
  public long toMillis();
  public long toNanos();
  j$.time.Duration ZERO;
}
-keep class j$.time.Instant {
  public j$.time.OffsetDateTime atOffset(j$.time.ZoneOffset);
  public long getEpochSecond();
  public int getNano();
  public int hashCode();
  public boolean isAfter(j$.time.Instant);
  public static j$.time.Instant ofEpochMilli(long);
  public static j$.time.Instant ofEpochSecond(long,long);
  public long toEpochMilli();
  j$.time.Instant EPOCH;
  j$.time.Instant MAX;
  j$.time.Instant MIN;
}
-keep class j$.time.LocalDateTime {
  public java.lang.String format(j$.time.format.DateTimeFormatter);
  public static j$.time.LocalDateTime parse(java.lang.CharSequence);
  public j$.time.LocalDateTime plusDays(long);
  public j$.time.LocalDateTime plusWeeks(long);
}
-keep class j$.time.OffsetDateTime {
  public j$.time.LocalDateTime toLocalDateTime();
}
-keep class j$.time.TimeConversions {
  public static java.time.Duration convert(j$.time.Duration);
  public static java.time.Instant convert(j$.time.Instant);
  public static j$.time.Duration convert(java.time.Duration);
}
-keep class j$.time.ZoneId {
  public static j$.time.ZoneId of(java.lang.String);
}
-keep class j$.time.ZoneOffset {
  j$.time.ZoneOffset UTC;
}
-keep class j$.time.ZonedDateTime {
  public int getDayOfMonth();
  public j$.time.DayOfWeek getDayOfWeek();
  public int getHour();
  public int getMinute();
  public int getMonthValue();
  public int getNano();
  public int getSecond();
  public int getYear();
  public static j$.time.ZonedDateTime now(j$.time.ZoneId);
  public static j$.time.ZonedDateTime of(int,int,int,int,int,int,int,j$.time.ZoneId);
  public static j$.time.ZonedDateTime of(j$.time.LocalDateTime,j$.time.ZoneId);
  public j$.time.ZonedDateTime plusDays(long);
}
-keep interface j$.time.chrono.ChronoZonedDateTime {
  public boolean isBefore(j$.time.chrono.ChronoZonedDateTime);
  public j$.time.Instant toInstant();
}
-keep class j$.time.format.DateTimeFormatter {
  public java.lang.String format(j$.time.temporal.TemporalAccessor);
  j$.time.format.DateTimeFormatter ISO_LOCAL_DATE;
  j$.time.format.DateTimeFormatter ISO_LOCAL_DATE_TIME;
}
-keep enum j$.time.temporal.ChronoUnit {
  public j$.time.Duration getDuration();
  j$.time.temporal.ChronoUnit MILLIS;
}
-keep interface j$.time.temporal.TemporalAccessor {
}
-keep class j$.util.DateRetargetClass {
  public static j$.time.Instant toInstant(java.util.Date);
}
-keep class j$.util.DesugarTimeZone {
  public static java.util.TimeZone getTimeZone(java.lang.String);
}
